// <auto-generated />
using System;
using Backend.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Backend.Models.AISuggestion", b =>
                {
                    b.Property<int>("AISuggestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AISuggestionId"));

                    b.Property<int>("ComplaintId")
                        .HasColumnType("integer");

                    b.Property<float?>("ConfidenceScore")
                        .HasColumnType("real");

                    b.Property<string>("N8nWorkflowId")
                        .HasColumnType("text");

                    b.Property<DateTime>("SuggestedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SuggestedCategory")
                        .HasColumnType("text");

                    b.Property<int?>("SuggestedDeptId")
                        .HasColumnType("integer");

                    b.HasKey("AISuggestionId");

                    b.HasIndex("ComplaintId");

                    b.HasIndex("SuggestedDeptId");

                    b.ToTable("AISuggestions");
                });

            modelBuilder.Entity("Backend.Models.Attachment", b =>
                {
                    b.Property<int>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AttachmentId"));

                    b.Property<int>("ComplaintId")
                        .HasColumnType("integer");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AttachmentId");

                    b.HasIndex("ComplaintId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Backend.Models.Complaint", b =>
                {
                    b.Property<int>("ComplaintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ComplaintId"));

                    b.Property<string>("AISummary")
                        .HasColumnType("text");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContactName")
                        .HasColumnType("text");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("text");

                    b.Property<string>("CurrentStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid");

                    b.HasKey("ComplaintId");

                    b.HasIndex("TicketId")
                        .IsUnique();

                    b.ToTable("Complaints");
                });

            modelBuilder.Entity("Backend.Models.ComplaintAssignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AssignmentId"));

                    b.Property<int?>("AISuggestionDeptId")
                        .HasColumnType("integer");

                    b.Property<int?>("AssignedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AssignedToDeptId")
                        .HasColumnType("integer");

                    b.Property<int>("ComplaintId")
                        .HasColumnType("integer");

                    b.Property<bool>("ConfirmedByDean")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AssignmentId");

                    b.HasIndex("AssignedByUserId");

                    b.HasIndex("AssignedToDeptId");

                    b.HasIndex("ComplaintId");

                    b.ToTable("ComplaintAssignments");
                });

            modelBuilder.Entity("Backend.Models.ComplaintCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("CategoryId");

                    b.HasIndex("CategoryName")
                        .IsUnique();

                    b.ToTable("ComplaintCategories");
                });

            modelBuilder.Entity("Backend.Models.ComplaintCategoryMap", b =>
                {
                    b.Property<int>("MapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MapId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("ComplaintId")
                        .HasColumnType("integer");

                    b.HasKey("MapId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ComplaintId");

                    b.ToTable("ComplaintCategoryMaps");
                });

            modelBuilder.Entity("Backend.Models.ComplaintLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LogId"));

                    b.Property<int>("ComplaintId")
                        .HasColumnType("integer");

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<string>("LogType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LogId");

                    b.HasIndex("ComplaintId");

                    b.HasIndex("UserId");

                    b.ToTable("ComplaintLogs");
                });

            modelBuilder.Entity("Backend.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("DepartmentId");

                    b.HasIndex("DepartmentName")
                        .IsUnique();

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Backend.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RoleId");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Backend.Models.TestItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TestItems");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Backend.Models.AISuggestion", b =>
                {
                    b.HasOne("Backend.Models.Complaint", "Complaint")
                        .WithMany("AISuggestions")
                        .HasForeignKey("ComplaintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Department", "SuggestedDept")
                        .WithMany()
                        .HasForeignKey("SuggestedDeptId");

                    b.Navigation("Complaint");

                    b.Navigation("SuggestedDept");
                });

            modelBuilder.Entity("Backend.Models.Attachment", b =>
                {
                    b.HasOne("Backend.Models.Complaint", "Complaint")
                        .WithMany("Attachments")
                        .HasForeignKey("ComplaintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Complaint");
                });

            modelBuilder.Entity("Backend.Models.ComplaintAssignment", b =>
                {
                    b.HasOne("Backend.Models.User", "AssignedByUser")
                        .WithMany("ComplaintAssignments")
                        .HasForeignKey("AssignedByUserId");

                    b.HasOne("Backend.Models.Department", "AssignedToDept")
                        .WithMany("ComplaintAssignments")
                        .HasForeignKey("AssignedToDeptId");

                    b.HasOne("Backend.Models.Complaint", "Complaint")
                        .WithMany("ComplaintAssignments")
                        .HasForeignKey("ComplaintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedByUser");

                    b.Navigation("AssignedToDept");

                    b.Navigation("Complaint");
                });

            modelBuilder.Entity("Backend.Models.ComplaintCategoryMap", b =>
                {
                    b.HasOne("Backend.Models.ComplaintCategory", "Category")
                        .WithMany("ComplaintCategoryMaps")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Complaint", "Complaint")
                        .WithMany("ComplaintCategoryMaps")
                        .HasForeignKey("ComplaintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Complaint");
                });

            modelBuilder.Entity("Backend.Models.ComplaintLog", b =>
                {
                    b.HasOne("Backend.Models.Complaint", "Complaint")
                        .WithMany("ComplaintLogs")
                        .HasForeignKey("ComplaintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.User", "User")
                        .WithMany("ComplaintLogs")
                        .HasForeignKey("UserId");

                    b.Navigation("Complaint");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.HasOne("Backend.Models.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Backend.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Backend.Models.Complaint", b =>
                {
                    b.Navigation("AISuggestions");

                    b.Navigation("Attachments");

                    b.Navigation("ComplaintAssignments");

                    b.Navigation("ComplaintCategoryMaps");

                    b.Navigation("ComplaintLogs");
                });

            modelBuilder.Entity("Backend.Models.ComplaintCategory", b =>
                {
                    b.Navigation("ComplaintCategoryMaps");
                });

            modelBuilder.Entity("Backend.Models.Department", b =>
                {
                    b.Navigation("ComplaintAssignments");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Backend.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Navigation("ComplaintAssignments");

                    b.Navigation("ComplaintLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
